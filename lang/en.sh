#!/bin/bash
# English Language File

# --- Menu Texts ---
MENU_TITLE="Git Action Menu"
MENU_SECTION_WORKFLOW="Daily Workflow"
MENU_ITEM_1="Initialize Project (init-repo)"
MENU_ITEM_2="Start New Feature"
MENU_ITEM_3="Finish Feature"
MENU_ITEM_4="Start New Release"
MENU_ITEM_5="Finish Release"
MENU_ITEM_6="Start New Hotfix"
MENU_ITEM_7="Finish Hotfix"
MENU_SECTION_SETUP="Project Setup"
MENU_ITEM_EXIT="Exit"
MENU_PROMPT="Please select an option"

# --- Prompt Texts ---
PROMPT_FEATURE_NAME="Enter feature name"
PROMPT_FINISH_FEATURE_NAME="Enter name of feature to finish"
PROMPT_RELEASE_VERSION="Enter release version number (e.g., v1.3.0)"
PROMPT_FINISH_RELEASE_VERSION="Enter release version to finish"
PROMPT_HOTFIX_NAME="Enter hotfix name"
PROMPT_FINISH_HOTFIX_NAME="Enter name of hotfix to finish"
PROMPT_NEW_VERSION="Enter new version number (e.g., v1.3.1)"
PROMPT_CONFIRM_INIT="This will create the 'develop' branch. This is only done once at the project's start. Are you sure? (y/Y)"
PROMPT_CONTINUE="Press Enter to continue..."

# --- Error and Status Messages ---
MSG_ERROR_PREFIX="Error:"
MSG_INVALID_CHOICE="Invalid choice!"
MSG_CANNOT_BE_EMPTY="cannot be empty."
MSG_OPERATION_CANCELLED="Operation cancelled."
MSG_EXITING="Exiting..."

# --- Script Specific Messages ---
INIT_HELP_DESC="This script is run once at the very beginning of a project to set up the Git-Flow structure. It creates a new branch named 'develop' from the 'main' branch and pushes both to the remote server."
INIT_HELP_USAGE="Usage"
INIT_CREATING_DEVELOP=">> Creating 'develop' branch..."
INIT_PUSHING_BRANCHES=">> Pushing 'main' and 'develop' branches to remote (origin)..."
INIT_SETUP_COMPLETE=">> Setup complete!"
INIT_REMINDER_PROTECT_BRANCHES="Do not forget to set 'main' and 'develop' as 'Protected Branches' in the GitLab interface."

# --- start-feature.sh Script Messages ---
SF_HELP_TITLE="start-feature.sh - Creates a new feature development branch."
SF_HELP_DESC_LINE_1="This script automates the process of starting a new feature development in accordance with Git-Flow strategy. It performs the following steps:"
SF_HELP_STEP_1="1. Switches to the 'develop' branch."
SF_HELP_STEP_2="2. Pulls the latest changes from the remote 'develop' branch."
SF_HELP_STEP_3="3. Creates and switches to a new branch in 'feature/<feature-name>' format."
SF_HELP_STEP_4="4. Pushes the new branch to the remote and sets it to track (-u)."
SF_HELP_EXAMPLE_TITLE="EXAMPLE:"
SF_HELP_EXAMPLE_DESC="# Creates a new feature branch named 'user-profile'."
SF_ERROR_NO_NAME="Feature name was not specified."
SF_INFO_SEE_HELP="For usage, run: $0 --help"
SF_INFO_SWITCHING_TO_DEV=">> Switching to 'develop' and updating..."
SF_INFO_CREATING_BRANCH=">> Creating new feature branch:"
SF_INFO_PUSHING_BRANCH=">> Pushing new branch to remote..."
SF_INFO_READY="branch is ready for you to work on!"

# --- finish-feature.sh Script Messages ---
FF_HELP_TITLE="finish-feature.sh - Completes a feature development branch."
FF_HELP_DESC_LINE_1="This script automates the steps to merge a completed feature branch into 'develop' and clean up the feature branch:"
FF_HELP_STEP_1="1. Switches to the 'develop' branch and pulls the latest changes."
FF_HELP_STEP_2="2. Merges the 'feature/<feature-name>' branch into 'develop' (--no-ff)."
FF_HELP_STEP_3="3. Pushes the updated 'develop' branch to the remote."
FF_HELP_STEP_4="4. Deletes the feature branch from both local and remote repositories."
FF_HELP_IMPORTANT_NOTE_TITLE="IMPORTANT NOTE:"
FF_HELP_IMPORTANT_NOTE_DESC="This script merges branches directly. For teamwork, creating a Merge Request (MR) via GitLab is the safer and recommended method."
FF_HELP_EXAMPLE_DESC="# Completes the feature branch named 'user-profile'."
FF_ERROR_NO_NAME="Feature name was not specified."
FF_INFO_MERGING="branch into 'develop'..."
FF_INFO_PUSHING_DEV=">> Pushing 'develop' branch to remote..."
FF_INFO_DELETING_BRANCH=">> Deleting feature branch from local and remote..."
FF_INFO_SUCCESS=">> Operation completed!"
FF_INFO_SUCCESS_DETAILS="has been successfully merged into 'develop'."

# --- start-release.sh Script Messages ---
SR_HELP_TITLE="start-release.sh - Starts a new release process."
SR_HELP_DESC_LINE_1="This script automates the creation of a new release branch from the current stable state of 'develop'. This branch is used for final tests, minor bug fixes, and version preparations before release."
SR_HELP_DESC_LINE_2="The script performs the following steps:"
SR_HELP_STEP_1="1. Switches to the 'develop' branch and pulls the latest changes."
SR_HELP_STEP_2="2. Creates and switches to a new branch in 'release/<version-number>' format."
SR_HELP_STEP_3="3. Pushes the new branch to the remote and sets it to track (-u)."
SR_HELP_EXAMPLE_DESC="# Creates a new release branch named 'v1.2.6'."
SR_ERROR_NO_VERSION="Version number was not specified."
SR_INFO_USAGE="Usage: $0 <version-number> (e.g., v1.2.6)"
SR_INFO_MORE_INFO="For more information, run: $0 --help"
SR_INFO_CREATING_BRANCH=">> Creating new release branch:"
SR_INFO_READY="branch is ready for final testing and preparations!"

# --- finish-release.sh Script Messages ---
FR_HELP_TITLE="finish-release.sh - Completes and publishes a release."
FR_HELP_DESC_LINE_1="This script merges a tested 'release' branch into the permanent branches 'main' and 'develop', tags the new version, and cleans up the temporary 'release' branch."
FR_HELP_DESC_LINE_2="The script performs the following steps in order:"
FR_HELP_STEP_1="1. Switches to 'main' and merges the 'release/<version>' branch into it."
FR_HELP_STEP_2="2. Tags this new merge commit on 'main' with the version number."
FR_HELP_STEP_3="3. Switches to 'develop' and also merges the 'release/<version>' branch into it. (This ensures that last-minute fixes from the release are also in 'develop')."
FR_HELP_STEP_4="4. Pushes the updated 'main' and 'develop' branches, and the new tag, to the remote (origin)."
FR_HELP_STEP_5="5. Deletes the completed 'release' branch from local and remote. ('develop' and 'main' are NEVER deleted)."
FR_HELP_EXAMPLE_DESC="# Completes and publishes the release 'v1.2.6'."
FR_INFO_SWITCHING_TO_MAIN=">> Switching to 'main' and updating..."
FR_INFO_MERGING_TO_MAIN="branch into 'main'..."
FR_INFO_TAGGING=">> Tagging version as:"
FR_INFO_MERGING_TO_DEV="branch into 'develop'..."
FR_INFO_PUSHING_ALL=">> Pushing 'main', 'develop', and tags to remote..."
FR_INFO_DELETING_BRANCH=">> Deleting release branch from local and remote..."
FR_INFO_SUCCESS_PREFIX=">> Release"
FR_INFO_SUCCESS_SUFFIX="has been successfully completed!"

# --- start-hotfix.sh Script Messages ---
SH_HELP_TITLE="start-hotfix.sh - Starts an emergency hotfix process."
SH_HELP_DESC_LINE_1="This script automates the creation of a new branch to fix an urgent bug found in the production code (i.e., the 'main' branch)."
SH_HELP_DESC_LINE_2="'Hotfix' branches are created directly from 'main', independent of new features in the 'develop' branch."
SH_HELP_DESC_LINE_3="The script performs the following steps:"
SH_HELP_STEP_1="1. Switches to the 'main' branch and pulls the latest changes."
SH_HELP_STEP_2="2. Creates and switches to a new branch in 'hotfix/<hotfix-name>' format."
SH_HELP_EXAMPLE_DESC="# Creates a new hotfix branch named 'emergency-login-fix'."
SH_ERROR_NO_NAME="Hotfix name was not specified."
SH_INFO_USAGE="Usage: $0 <hotfix-name>"
SH_INFO_CREATING_BRANCH=">> Creating new hotfix branch:"
SH_INFO_READY="is ready for you to work on!"

# --- finish-hotfix.sh Script Messages ---
FH_HELP_TITLE="finish-hotfix.sh - Completes an emergency hotfix process."
FH_HELP_DESC_LINE_1="This script merges a 'hotfix' branch containing an urgent fix into the permanent branches 'main' and 'develop', assigns a new version tag, and cleans up the 'hotfix' branch."
FH_HELP_STEP_1="1. Switches to 'main' and merges the 'hotfix/<name>' branch into it."
FH_HELP_STEP_2="2. Tags this merge on 'main' with the <new-version-number>."
FH_HELP_STEP_3="3. Switches to 'develop' and also merges the 'hotfix/<name>' branch into it. (This ensures the fix is included in future development)."
FH_HELP_STEP_4="4. Pushes the updated 'main' and 'develop' branches, and the new tag, to the remote."
FH_HELP_STEP_5="5. Deletes the completed 'hotfix' branch from local."
FH_HELP_ARGS_TITLE="REQUIRED ARGUMENTS:"
FH_HELP_ARG_1="<hotfix-name>          : The name of the branch created with 'start-hotfix.sh'."
FH_HELP_ARG_2="<new-version-number>   : The new version number to be released with this fix (e.g., v1.2.8)."
FH_HELP_EXAMPLE_DESC="# Completes the 'emergency-login-fix' and releases it as v1.2.8."
FH_ERROR_MISSING_ARGS="Missing arguments."
FH_INFO_USAGE="Usage: $0 <hotfix-name> <new-version-number>"
FH_INFO_SWITCHING_TO_MAIN=">> Switching to 'main'..."
FH_INFO_SWITCHING_TO_DEV=">> Switching to 'develop'..."
FH_INFO_TAGGING=">> Tagging new version as:"
FH_INFO_DELETING_BRANCH=">> Deleting hotfix branch from local..."
FH_INFO_SUCCESS_PREFIX=">> Hotfix"
FH_INFO_SUCCESS_SUFFIX="has been successfully completed!"